# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nOB06CxvBN14ly4eilD5YhkzcafYrXGw
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report

# 1. Load dataset
# The previous URL was not working. Using a different accessible sample dataset URL.
# NOTE: This dataset may not have the same columns ('temperature', 'rainfall', 'humidity', 'cases')
# as the original intended dataset. You may need to adjust the code below
# if you can find a suitable dataset with those columns.
url = "https://raw.githubusercontent.com/plotly/datasets/master/diabetes.csv"
df = pd.read_csv(url)

# Check the columns of the new dataset
print("✅ Dataset Loaded Successfully! Columns in the new dataset:")
print(df.columns)
print("\nFirst 5 rows:")
print(df.head())


# 2. Create target variable (outbreak yes/no)
# This part of the code assumes a 'cases' column and a condition (cases > 50).
# Since the new dataset is different, this line might need adjustment based on the new dataset's columns and target variable.
# For demonstration, let's assume we want to predict 'Outcome' from the diabetes dataset.
if 'Outcome' in df.columns:
    df['outbreak'] = df['Outcome'] # Using 'Outcome' as the target variable for demonstration
    print("\n'outbreak' column created based on 'Outcome' column.")
elif 'cases' in df.columns:
     df['outbreak'] = df['cases'].apply(lambda x: 1 if x > 50 else 0)
     print("\n'outbreak' column created based on 'cases' column.")
else:
    print("\n❌ Could not create 'outbreak' column. The dataset does not contain 'Outcome' or 'cases' column.")
    # You might need to define a new target based on the available columns in the diabetes dataset


# 3. Features and target
# The original features were 'temperature', 'rainfall', 'humidity'.
# These columns are likely not in the new diabetes dataset.
# You need to select appropriate features from the new dataset.
# For demonstration, let's use some columns from the diabetes dataset as features.
# Replace with actual feature columns from the loaded dataset if needed.
selected_features = ['Glucose', 'BloodPressure', 'BMI', 'Age'] # Example features from diabetes dataset
available_columns = df.columns.tolist()

# Check if selected features are in the dataframe
X_columns = [col for col in selected_features if col in available_columns]

if X_columns and 'outbreak' in df.columns:
    X = df[X_columns]
    y = df['outbreak']
    print(f"\nUsing features: {X_columns} and target 'outbreak'.")

    # 4. Train-test split
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    # 5. Train model
    model = RandomForestClassifier(n_estimators=100, random_state=42)
    model.fit(X_train, y_train)
    print("\n✅ Model trained successfully!")

    # 6. Evaluate
    y_pred = model.predict(X_test)
    print("\nClassification Report:")
    print(classification_report(y_test, y_pred))

    # 7. Predict new case
    # The structure of new_data needs to match the selected features.
    # Replace with example values for the selected features.
    if len(X_columns) == len(selected_features): # Ensure all selected features are present
        new_data_values = [[140, 70, 30, 40]] # Example values matching selected_features
        new_data = pd.DataFrame(new_data_values, columns=X_columns)
        print("\nPrediction for new case:")
        print("Prediction (1=Outbreak/Outcome, 0=No Outbreak/Outcome):", model.predict(new_data)[0])
    else:
         print("\n❌ Cannot make prediction for new case. The selected features for prediction do not match the features used for training.")


else:
    print("\n❌ Cannot proceed with training and prediction. Ensure features and target columns are correctly defined based on the loaded dataset.")